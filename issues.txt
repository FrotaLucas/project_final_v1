1 tentar colocar todos os try catch nesse formato aqui
        // try {
            //executequery
        //} catch (SQLException e) {
            //System.out.println("Customer does not exist." + e.getMessage());
        //}

        
2 Para os casos que precisa verificar se existe usuario antes. Pensar
como sair fazer return; e nem precisar de try catch extra. 
    

3 Os testes Unitarios introduzem novos Costumers. As tags @BeforeEach e @AfterEach 
eliminam tudo que for modificado no BD. COrreto ?


4 apagar executeUpdate e usar somente executeQuery!!
(torna o modulo Database mais simples)

5 //depois tentar entender pq essa forma de injetar Database nos testes nao pode ser usada nos Services tbm 
class DataBaseTest {
  private DataBase _database;
  private Connection _connection;

  @BeforeEach
  void setUp() throws SQLException
  {
    _database = new DataBase(); // AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
    _connection = DataBase.connect();
  }
}


6 nao preciso colocar await nos metodos service que interagem com o BD???

7 susbstituir setCustomer por setCustomerId para fazer os testes de ReadingServiceTest

8 getReading(id) e getCustomer(id) quando executados estao criando novo uuid
para o objeto que nao corresponde ao que esta salvo no banco de dados. 
 
-----------------------

introduzir prepare statement para substituir as strings sql

campo de user Id eh required. Nao pode inserir nada em Reading
se nao tiver um userId

se alguma leitura da tabela Reading for apagada, deve se apagar somente
userId.

file IReading.java

devo retornar Icustomer ou Customer aqui ?
ICustomer getCustomer();


classe Reading

as propriedades abaixo sao importantes para interagir com
tabela customers e mostrar dados no frontend. Fazer busca por nome
do usuario ou pelo customerId. 

//private Customer customer;

//private int customerId;